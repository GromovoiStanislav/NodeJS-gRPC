// source: currency.protopublic
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.currency.ConvertRequest', null, global);
goog.exportSymbol('proto.currency.ConvertResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.currency.ConvertRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.currency.ConvertRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.currency.ConvertRequest.displayName = 'proto.currency.ConvertRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.currency.ConvertResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.currency.ConvertResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.currency.ConvertResponse.displayName = 'proto.currency.ConvertResponse';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.currency.ConvertRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.currency.ConvertRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.currency.ConvertRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.currency.ConvertRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        fromCurrency: jspb.Message.getFieldWithDefault(msg, 1, ''),
        toCurrency: jspb.Message.getFieldWithDefault(msg, 2, ''),
        amount: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.currency.ConvertRequest}
 */
proto.currency.ConvertRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.currency.ConvertRequest();
  return proto.currency.ConvertRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.currency.ConvertRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.currency.ConvertRequest}
 */
proto.currency.ConvertRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setFromCurrency(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setToCurrency(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setAmount(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.currency.ConvertRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.currency.ConvertRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.currency.ConvertRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.currency.ConvertRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getFromCurrency();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getToCurrency();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeFloat(3, f);
  }
};

/**
 * optional string from_currency = 1;
 * @return {string}
 */
proto.currency.ConvertRequest.prototype.getFromCurrency = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.currency.ConvertRequest} returns this
 */
proto.currency.ConvertRequest.prototype.setFromCurrency = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string to_currency = 2;
 * @return {string}
 */
proto.currency.ConvertRequest.prototype.getToCurrency = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.currency.ConvertRequest} returns this
 */
proto.currency.ConvertRequest.prototype.setToCurrency = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional float amount = 3;
 * @return {number}
 */
proto.currency.ConvertRequest.prototype.getAmount = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.currency.ConvertRequest} returns this
 */
proto.currency.ConvertRequest.prototype.setAmount = function (value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.currency.ConvertResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.currency.ConvertResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.currency.ConvertResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.currency.ConvertResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        convertedAmount: jspb.Message.getFloatingPointFieldWithDefault(
          msg,
          1,
          0.0
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.currency.ConvertResponse}
 */
proto.currency.ConvertResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.currency.ConvertResponse();
  return proto.currency.ConvertResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.currency.ConvertResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.currency.ConvertResponse}
 */
proto.currency.ConvertResponse.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setConvertedAmount(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.currency.ConvertResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.currency.ConvertResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.currency.ConvertResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.currency.ConvertResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getConvertedAmount();
  if (f !== 0.0) {
    writer.writeFloat(1, f);
  }
};

/**
 * optional float converted_amount = 1;
 * @return {number}
 */
proto.currency.ConvertResponse.prototype.getConvertedAmount = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.currency.ConvertResponse} returns this
 */
proto.currency.ConvertResponse.prototype.setConvertedAmount = function (value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};

goog.object.extend(exports, proto.currency);
