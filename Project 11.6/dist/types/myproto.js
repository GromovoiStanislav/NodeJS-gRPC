/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.3
 * source: myproto.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export var Kind;
(function (Kind) {
    Kind[Kind["UPDATED"] = 0] = "UPDATED";
    Kind[Kind["DELETED"] = 1] = "DELETED";
})(Kind || (Kind = {}));
export class Author extends pb_1.Message {
    #one_of_decls = [];
    constructor(data) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("role" in data && data.role != undefined) {
                this.role = data.role;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "");
    }
    set name(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get role() {
        return pb_1.Message.getFieldWithDefault(this, 2, "");
    }
    set role(value) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data) {
        const message = new Author({});
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.role != null) {
            message.role = data.role;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.role != null) {
            data.role = this.role;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (this.role.length)
            writer.writeString(2, this.role);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Author();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.role = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return Author.deserialize(bytes);
    }
}
export class Change extends pb_1.Message {
    #one_of_decls = [[4, 5]];
    constructor(data) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("kind" in data && data.kind != undefined) {
                this.kind = data.kind;
            }
            if ("patch" in data && data.patch != undefined) {
                this.patch = data.patch;
            }
            if ("tags" in data && data.tags != undefined) {
                this.tags = data.tags;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("author" in data && data.author != undefined) {
                this.author = data.author;
            }
        }
    }
    get kind() {
        return pb_1.Message.getFieldWithDefault(this, 1, Kind.UPDATED);
    }
    set kind(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get patch() {
        return pb_1.Message.getFieldWithDefault(this, 2, "");
    }
    set patch(value) {
        pb_1.Message.setField(this, 2, value);
    }
    get tags() {
        return pb_1.Message.getFieldWithDefault(this, 3, []);
    }
    set tags(value) {
        pb_1.Message.setField(this, 3, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 4, "");
    }
    set name(value) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
    }
    get has_name() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 5, "");
    }
    set id(value) {
        pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
    }
    get has_id() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get author() {
        return pb_1.Message.getWrapperField(this, Author, 6);
    }
    set author(value) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get has_author() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get name_or_id() {
        const cases = {
            0: "none",
            4: "name",
            5: "id"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4, 5])];
    }
    static fromObject(data) {
        const message = new Change({});
        if (data.kind != null) {
            message.kind = data.kind;
        }
        if (data.patch != null) {
            message.patch = data.patch;
        }
        if (data.tags != null) {
            message.tags = data.tags;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.author != null) {
            message.author = Author.fromObject(data.author);
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.kind != null) {
            data.kind = this.kind;
        }
        if (this.patch != null) {
            data.patch = this.patch;
        }
        if (this.tags != null) {
            data.tags = this.tags;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.author != null) {
            data.author = this.author.toObject();
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.kind != Kind.UPDATED)
            writer.writeEnum(1, this.kind);
        if (this.patch.length)
            writer.writeString(2, this.patch);
        if (this.tags.length)
            writer.writeRepeatedString(3, this.tags);
        if (this.has_name)
            writer.writeString(4, this.name);
        if (this.has_id)
            writer.writeString(5, this.id);
        if (this.has_author)
            writer.writeMessage(6, this.author, () => this.author.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Change();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.kind = reader.readEnum();
                    break;
                case 2:
                    message.patch = reader.readString();
                    break;
                case 3:
                    pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                    break;
                case 4:
                    message.name = reader.readString();
                    break;
                case 5:
                    message.id = reader.readString();
                    break;
                case 6:
                    reader.readMessage(message.author, () => message.author = Author.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return Change.deserialize(bytes);
    }
}
